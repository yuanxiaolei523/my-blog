{"remainingRequest":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/babel-loader/lib/index.js??ref--4-2!/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/@qnpm/ykit3-config-resolver/lib/addHotCodeLoader.js!/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/query-string/index.js","dependencies":[{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/query-string/index.js","hash":"3f8e739a5753ba88a7a58045f725a34f"},{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"},{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/@qnpm/ykit3-config-resolver/lib/addHotCodeLoader.js","hash":"c8cef10933c4d5175b7cf2b36412e500"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTsKCnZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7CgpmdW5jdGlvbiBlbmNvZGVyRm9yQXJyYXlGb3JtYXQob3B0cykgewogIHN3aXRjaCAob3B0cy5hcnJheUZvcm1hdCkgewogICAgY2FzZSAnaW5kZXgnOgogICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGluZGV4KSB7CiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gW2VuY29kZShrZXksIG9wdHMpLCAnWycsIGluZGV4LCAnXSddLmpvaW4oJycpIDogW2VuY29kZShrZXksIG9wdHMpLCAnWycsIGVuY29kZShpbmRleCwgb3B0cyksICddPScsIGVuY29kZSh2YWx1ZSwgb3B0cyldLmpvaW4oJycpOwogICAgICB9OwoKICAgIGNhc2UgJ2JyYWNrZXQnOgogICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtlbmNvZGUoa2V5LCBvcHRzKSwgJ1tdPScsIGVuY29kZSh2YWx1ZSwgb3B0cyldLmpvaW4oJycpOwogICAgICB9OwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IGVuY29kZShrZXksIG9wdHMpIDogW2VuY29kZShrZXksIG9wdHMpLCAnPScsIGVuY29kZSh2YWx1ZSwgb3B0cyldLmpvaW4oJycpOwogICAgICB9OwogIH0KfQoKZnVuY3Rpb24gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0cykgewogIHZhciByZXN1bHQ7CgogIHN3aXRjaCAob3B0cy5hcnJheUZvcm1hdCkgewogICAgY2FzZSAnaW5kZXgnOgogICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7CiAgICAgICAgcmVzdWx0ID0gL1xbKFxkKilcXSQvLmV4ZWMoa2V5KTsKICAgICAgICBrZXkgPSBrZXkucmVwbGFjZSgvXFtcZCpcXSQvLCAnJyk7CgogICAgICAgIGlmICghcmVzdWx0KSB7CiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0ge307CiAgICAgICAgfQoKICAgICAgICBhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTsKICAgICAgfTsKCiAgICBjYXNlICdicmFja2V0JzoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikgewogICAgICAgIHJlc3VsdCA9IC8oXFtcXSkkLy5leGVjKGtleSk7CiAgICAgICAga2V5ID0ga2V5LnJlcGxhY2UoL1xbXF0kLywgJycpOwoKICAgICAgICBpZiAoIXJlc3VsdCkgewogICAgICAgICAgYWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gZWxzZSBpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gW3ZhbHVlXTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSBbXS5jb25jYXQoYWNjdW11bGF0b3Jba2V5XSwgdmFsdWUpOwogICAgICB9OwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpIHsKICAgICAgICBpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gW10uY29uY2F0KGFjY3VtdWxhdG9yW2tleV0sIHZhbHVlKTsKICAgICAgfTsKICB9Cn0KCmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0cykgewogIGlmIChvcHRzLmVuY29kZSkgewogICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gc3RyaWN0VXJpRW5jb2RlKHZhbHVlKSA6IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7CiAgfQoKICByZXR1cm4gdmFsdWU7Cn0KCmZ1bmN0aW9uIGtleXNTb3J0ZXIoaW5wdXQpIHsKICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHsKICAgIHJldHVybiBpbnB1dC5zb3J0KCk7CiAgfSBlbHNlIGlmIChfdHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcpIHsKICAgIHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSkuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpOwogICAgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgcmV0dXJuIGlucHV0W2tleV07CiAgICB9KTsKICB9CgogIHJldHVybiBpbnB1dDsKfQoKZXhwb3J0cy5leHRyYWN0ID0gZnVuY3Rpb24gKHN0cikgewogIHJldHVybiBzdHIuc3BsaXQoJz8nKVsxXSB8fCAnJzsKfTsKCmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7CiAgb3B0cyA9IG9iamVjdEFzc2lnbih7CiAgICBhcnJheUZvcm1hdDogJ25vbmUnCiAgfSwgb3B0cyk7CiAgdmFyIGZvcm1hdHRlciA9IHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdHMpOyAvLyBDcmVhdGUgYW4gb2JqZWN0IHdpdGggbm8gcHJvdG90eXBlCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9xdWVyeS1zdHJpbmcvaXNzdWVzLzQ3CgogIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwoKICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHsKICAgIHJldHVybiByZXQ7CiAgfQoKICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoL14oXD98I3wmKS8sICcnKTsKCiAgaWYgKCFzdHIpIHsKICAgIHJldHVybiByZXQ7CiAgfQoKICBzdHIuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkgewogICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXCsvZywgJyAnKS5zcGxpdCgnPScpOyAvLyBGaXJlZm94IChwcmUgNDApIGRlY29kZXMgYCUzRGAgdG8gYD1gCiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZy9wdWxsLzM3CgogICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCk7CiAgICB2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzLmpvaW4oJz0nKSA6IHVuZGVmaW5lZDsgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDoKICAgIC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnMKCiAgICB2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQodmFsKTsKICAgIGZvcm1hdHRlcihkZWNvZGVVUklDb21wb25lbnQoa2V5KSwgdmFsLCByZXQpOwogIH0pOwogIHJldHVybiBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7CiAgICB2YXIgdmFsID0gcmV0W2tleV07CgogICAgaWYgKEJvb2xlYW4odmFsKSAmJiBfdHlwZW9mKHZhbCkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCkpIHsKICAgICAgLy8gU29ydCBvYmplY3Qga2V5cywgbm90IHZhbHVlcwogICAgICByZXN1bHRba2V5XSA9IGtleXNTb3J0ZXIodmFsKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdFtrZXldID0gdmFsOwogICAgfQoKICAgIHJldHVybiByZXN1bHQ7CiAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7Cn07CgpleHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmosIG9wdHMpIHsKICB2YXIgZGVmYXVsdHMgPSB7CiAgICBlbmNvZGU6IHRydWUsCiAgICBzdHJpY3Q6IHRydWUsCiAgICBhcnJheUZvcm1hdDogJ25vbmUnCiAgfTsKICBvcHRzID0gb2JqZWN0QXNzaWduKGRlZmF1bHRzLCBvcHRzKTsKICB2YXIgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdHMpOwogIHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgdmFyIHZhbCA9IG9ialtrZXldOwoKICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gJyc7CiAgICB9CgogICAgaWYgKHZhbCA9PT0gbnVsbCkgewogICAgICByZXR1cm4gZW5jb2RlKGtleSwgb3B0cyk7CiAgICB9CgogICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgewogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIHZhbC5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHsKICAgICAgICBpZiAodmFsMiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICByZXN1bHQucHVzaChmb3JtYXR0ZXIoa2V5LCB2YWwyLCByZXN1bHQubGVuZ3RoKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTsKICAgIH0KCiAgICByZXR1cm4gZW5jb2RlKGtleSwgb3B0cykgKyAnPScgKyBlbmNvZGUodmFsLCBvcHRzKTsKICB9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsKICAgIHJldHVybiB4Lmxlbmd0aCA+IDA7CiAgfSkuam9pbignJicpIDogJyc7Cn07CgppZiAobW9kdWxlLmhvdCkgewogIG1vZHVsZS5ob3QuYWNjZXB0KCk7Cn0="},null]}