{"remainingRequest":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/babel-loader/lib/index.js??ref--4-2!/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/@qnpm/ykit3-config-resolver/lib/addHotCodeLoader.js!/Users/qitmac001126/Documents/my/ykit3_demo/node_modules/axios/lib/utils.js","dependencies":[{"path":"/Users/qitmac001126/Documents/my/ykit3_demo/node_modules/axios/lib/utils.js","hash":"08ae5c9630e5072fcfb01806d5aeee75"},{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"},{"path":"/usr/local/lib/node_modules/@qnpm/ykit3-cli/node_modules/@qnpm/ykit3-config-resolver/lib/addHotCodeLoader.js","hash":"c8cef10933c4d5175b7cf2b36412e500"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}